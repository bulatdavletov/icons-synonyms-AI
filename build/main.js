var y=Object.defineProperty,R=Object.defineProperties,G=Object.getOwnPropertyDescriptor,W=Object.getOwnPropertyDescriptors,k=Object.getOwnPropertyNames,C=Object.getOwnPropertySymbols;var A=Object.prototype.hasOwnProperty,J=Object.prototype.propertyIsEnumerable;var w=(e,t,o)=>t in e?y(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,E=(e,t)=>{for(var o in t||(t={}))A.call(t,o)&&w(e,o,t[o]);if(C)for(var o of C(t))J.call(t,o)&&w(e,o,t[o]);return e},I=(e,t)=>R(e,W(t));var p=(e,t)=>()=>(e&&(t=e(e=0)),t);var K=(e,t)=>{for(var o in t)y(e,o,{get:t[o],enumerable:!0})},q=(e,t,o,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of k(t))!A.call(e,s)&&s!==o&&y(e,s,{get:()=>t[s],enumerable:!(r=G(t,s))||r.enumerable});return e};var H=e=>q(y({},"__esModule",{value:!0}),e);function g(e,t){let o=`${S}`;return S+=1,u[o]={handler:t,name:e},function(){delete u[o]}}function O(e,t){let o=!1;for(let r in u)u[r].name===e&&(u[r].handler.apply(null,t),o=!0);if(o===!1)throw new Error(`No event handler with name \`${e}\``)}var u,S,l,P=p(()=>{u={},S=0;l=typeof window=="undefined"?function(e,...t){figma.ui.postMessage([e,...t])}:function(e,...t){window.parent.postMessage({pluginMessage:[e,...t]},"*")};typeof window=="undefined"?figma.ui.onmessage=function(e){if(!Array.isArray(e))return;let[t,...o]=e;typeof t=="string"&&O(t,o)}:window.onmessage=function(e){if(typeof e.data.pluginMessage=="undefined")return;let t=e.data.pluginMessage;if(!Array.isArray(t))return;let[o,...r]=e.data.pluginMessage;typeof o=="string"&&O(o,r)}});function N(e,t){if(typeof __html__=="undefined")throw new Error("No UI defined");let o=`<div id="create-figma-plugin"></div><script>document.body.classList.add('theme-${figma.editorType}');const __FIGMA_COMMAND__='${typeof figma.command=="undefined"?"":figma.command}';const __SHOW_UI_DATA__=${JSON.stringify(typeof t=="undefined"?{}:t)};${__html__}</script>`;figma.showUI(o,I(E({},e),{themeColors:typeof e.themeColors=="undefined"?!0:e.themeColors}))}var b=p(()=>{});var T=p(()=>{P();b()});async function M(e,t={}){try{let o=t.scale||2,s={format:t.format||"PNG",constraint:{type:"SCALE",value:o}},i=await e.exportAsync(s);return figma.base64Encode(i)}catch(o){throw console.error("Error exporting node:",o),new Error("Failed to export icon")}}function h(e){if(e.type==="INSTANCE"){let t=e.mainComponent;if(t)return t}return e}function _(e){if(e.length===0)return null;if(e.length===1)return h(e[0]);let t=e.filter(r=>r.type==="COMPONENT");if(t.length>0)return h(t[0]);let o=e.filter(r=>r.type==="INSTANCE");return o.length>0?h(o[0]):h(e[0])}var j=p(()=>{"use strict"});var x,v=p(()=>{"use strict";x={OPENAI_API_KEY:"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"};x.OPENAI_API_KEY||console.warn("OpenAI API key is not set in .env file")});function B(e,t){return`
    This is an icon named "${e}". 
    ${t?`It currently has this description: "${t}"`:""}
    Please analyze this icon and provide information in the following format. Each line should start with the category name:

    1. Usage (required):
       - This is how the icon is used in the IDE
       - Usually it's the name of the action or feature
       - If name contains multiple words in camelCase, split them with spaces
       - Example: "projectStructure" -> "Usage: project structure"
       - Format: "Usage: your text here"

    2. Object (required):
       - The main object represented in the icon
       - Example: if named "projectStructure" but shows a folder icon -> "Object: folder"
       - Can include multiple related terms separated by commas
       - Format: "Object: term1, term2"

    3. Modificator (if found, leave empty if not):
       - Look for small icons/indicators in the corners (usually bottom right)
       - Example: folder with gear icon -> "Modificator: gear, settings"
       - Format: "Modificator: term1, term2" (or leave empty)

    4. Shapes (if found, leave empty if not):
       - List any simple shapes you see in the icon
       - Include circles, squares, rectangles, arrows, etc.
       - Example: "Shapes: circle, arrow, triangle"
       - Format: "Shapes: shape1, shape2, shape3"

    Example output:
    Usage: project structure
    Object: folder
    Modificator: gear
    Shapes: square, arrow

    Context: These icons are used in JetBrains IDEs.
    Don't use words like "icon", "symbol", "image", etc.
    Don't repeat the name of icon or existing description.
    Return only these four categories with their values, one per line.
    Leave empty lines for categories that don't apply (except required ones).
  `}var U=p(()=>{"use strict"});function V(e){let t=e.split(`
`).map(r=>r.trim()).filter(r=>r.length>0),o=[];for(let r of t)if(r.toLowerCase().startsWith("usage:"))o.push(r);else if(r.toLowerCase().startsWith("object:"))o.push(r);else if(r.toLowerCase().startsWith("modificator:"))o.push(r);else if(r.toLowerCase().startsWith("shapes:"))o.push(r);else{if(r==="Usage"||r==="Object"||r==="Modificator"||r==="Shapes")continue;if(r.includes(":")){let[s,...i]=r.split(":"),m=s.trim();["usage","object","modificator","shapes"].includes(m.toLowerCase())&&o.push(`${m}: ${i.join(":").trim()}`)}}return console.log("Parsed response lines:",o),o}async function L(e){try{if(!x.OPENAI_API_KEY)throw new Error("OpenAI API key is not set. Please add it to your .env file.");let t=B(e.name,e.existingDescription),o=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${x.OPENAI_API_KEY}`},body:JSON.stringify({model:"gpt-4o",messages:[{role:"user",content:[{type:"text",text:t},{type:"image_url",image_url:{url:`data:image/png;base64,${e.imageBase64}`}}]}],max_tokens:300})});if(!o.ok){let i=await o.json().catch(()=>null);throw new Error(`OpenAI API error: ${o.statusText}${i?" - "+JSON.stringify(i):""}`)}let r=await o.json();console.log("Response from OpenAI:",r.choices[0].message.content);let s=V(r.choices[0].message.content);if(!s||s.length===0)throw new Error("No valid synonyms generated");return{synonyms:s}}catch(t){return console.error("Error generating synonyms:",t),{synonyms:[],error:t.message||"Unknown error occurred"}}}var D=p(()=>{"use strict";v();U()});var $={};K($,{default:()=>Y});function Y(){N({width:400,height:500});function e(o,r){o.description=r}function t(){var r,s;let o=figma.currentPage.selection;if(o.length===1){let i=o[0];if(i.type==="COMPONENT"||i.type==="COMPONENT_SET"||i.type==="INSTANCE"){let m=!!(i.type==="INSTANCE"?(r=i.mainComponent)!=null&&r.description:i.description),c=i.type==="INSTANCE"?((s=i.mainComponent)==null?void 0:s.description)||"":i.description||"";l("selection-change",{name:i.name,type:i.type,description:c,hasDescription:m})}}}g("generate-synonyms",async()=>{try{figma.notify("Generating synonyms...");let o=figma.currentPage.selection,r=_(o);if(!r){l("generate-error",{error:"No valid icon selected"});return}let s=await M(r),i=r.name,m="";r.type==="COMPONENT"?m=r.description||"":r.type==="INSTANCE"&&r.mainComponent&&(m=r.mainComponent.description||"");let c=await L({name:i,imageBase64:s,existingDescription:m});console.log("Raw synonyms from AI:",c.synonyms);let d=[{title:"Usage",synonyms:c.synonyms.filter(n=>n.toLowerCase().startsWith("usage:")).map(n=>n.replace(/^usage:\s*/i,"").trim())},{title:"Object",synonyms:c.synonyms.filter(n=>n.toLowerCase().startsWith("object:")).map(n=>n.replace(/^object:\s*/i,"").trim()).flatMap(n=>n.split(",").map(f=>f.trim())).filter(n=>n.length>0)},{title:"Modificator",synonyms:c.synonyms.filter(n=>n.toLowerCase().startsWith("modificator:")).map(n=>n.replace(/^modificator:\s*/i,"").trim()).flatMap(n=>n.split(",").map(f=>f.trim())).filter(n=>n.length>0)},{title:"Shapes",synonyms:c.synonyms.filter(n=>n.toLowerCase().startsWith("shapes:")).map(n=>n.replace(/^shapes:\s*/i,"").trim()).flatMap(n=>n.split(",").map(f=>f.trim())).filter(n=>n.length>0)}].filter(n=>n.synonyms.length>0);console.log("Grouped synonyms:",d),l("synonyms-generated",{groups:d}),figma.notify("Synonyms generated successfully!")}catch(o){console.error("Error in generate-synonyms handler:",o),l("generate-error",{error:o.message||"Unknown error occurred"}),figma.notify("Error generating synonyms")}}),g("update-description",o=>{let r=figma.currentPage.selection[0];if(r&&(r.type==="COMPONENT"||r.type==="COMPONENT_SET"))try{let s=r.description||"",i=o.synonyms.filter(a=>a.toLowerCase().startsWith("usage:")).map(a=>a.replace(/^usage:\s*/i,"").trim()),m=o.synonyms.filter(a=>a.toLowerCase().startsWith("object:")).map(a=>a.replace(/^object:\s*/i,"").trim()),c=o.synonyms.filter(a=>a.toLowerCase().startsWith("modificator:")).map(a=>a.replace(/^modificator:\s*/i,"").trim()),d=o.synonyms.filter(a=>a.toLowerCase().startsWith("shapes:")).map(a=>a.replace(/^shapes:\s*/i,"").trim()),n=[];i.length>0&&n.push(`Usage: ${i.join(", ")}`),m.length>0&&n.push(`Object: ${m.join(", ")}`),c.length>0&&n.push(`Modificator: ${c.join(", ")}`),d.length>0&&n.push(`Shapes: ${d.join(", ")}`);let f=s?`${s}
${n.join(`
`)}`:n.join(`
`);r.description=f,figma.notify("Description updated successfully!")}catch(s){l("generate-error",{error:"Failed to update description: "+s.message})}}),figma.on("selectionchange",()=>{t()}),t()}var F=p(()=>{"use strict";T();j();D()});var z={"src/main.ts--default":(F(),H($)).default},X="src/main.ts--default";z[X]();
